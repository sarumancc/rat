/**
 * Process Controller for SimpleAstrometry
 * Handles image uploads, processing, and retrieval for astrometry operations
 */
const iconv = require('iconv-lite');
const path = require('path');
const fs = require('fs');
const shell = require('shelljs');
const ShortUniqueId = require('short-unique-id');

// Configuration constants
const ALLOWED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
const MAX_FILE_SIZE = 20971520; // 20MB
const BASE_PATH = '/home/chupacabra/simpleastrometry/';
const IMG_TEMP = `${BASE_PATH}procesar-imagen/img-temp`;
const THUMBNAIL_DIR = `${BASE_PATH}public/images/thumbnail`;
const SOLVE_IMAGE_DIR = `${BASE_PATH}procesar-imagen/solve-images`;
const SCRIPT_PATH = 'procesar-imagen/./procesar_imagen.sh';

// Request counter for debugging
let requestCounter = 0;

/**
 * Gets file size in bytes
 * @param {string} filePath - Path to the file
 * @returns {number|null} - File size in bytes or null if error
 */
function getFilesizeInBytes(filePath) {
	try {
		const stats = fs.statSync(filePath);
		return stats.size;
	} catch (err) {
		console.error(`Error getting file size: ${err.message}`);
		return null;
	}
}

/**
 * Reads and returns JSON log file content
 * @param {string} filepath - Path to the JSON log file
 * @returns {string} - Content of the JSON file or empty array as string if error
 */
function getJSONLog(filepath) {
	try {
		if (!fs.existsSync(filepath)) {
			console.log(`File does not exist: ${filepath}`);
			return '[]';
		}
		return fs.readFileSync(filepath, 'utf-8');
	} catch (error) {
		console.error(`Error reading JSON log: ${error.message}`);
		return '[]';
	}
}

/**
 * Converts HEX color to RGB format
 * @param {string} hex - Hex color code (e.g. #FF00FF)
 * @returns {string} - RGB format as "r:g:b"
 */
function hexToRgb(hex) {
	const r = parseInt(hex.substring(1, 3), 16);
	const g = parseInt(hex.substring(3, 5), 16);
	const b = parseInt(hex.substring(5, 7), 16);
	return `${r}:${g}:${b}`;
}

const processController = {
	/**
	 * Processes uploaded image with astrometry parameters
	 * @param {Object} req - Express request object
	 * @param {Object} res - Express response object
	 */
	imageProcess: async (req, res) => {
		try {
			// Validate file upload
			if (!req.files || Object.keys(req.files).length === 0) {
				return res.status(400).json({ status: 'fail', message: 'No files uploaded' });
			}

			const uploadedFile = req.files.imgInput;
			const inputJson = req.body;
			
			// Validate file size
			if (uploadedFile.size > MAX_FILE_SIZE) {
				return res.status(413).json({ status: 'fail', message: 'File exceeds maximum allowed size' });
			}

			// Validate file type
			if (!ALLOWED_MIME_TYPES.includes(uploadedFile.mimetype)) {
				return res.status(400).json({ status: 'fail', message: 'Only image files are allowed' });
			}

			// Generate unique ID and file path
			const uid = new ShortUniqueId({ length: 10 });
			const id = uid.rnd();
			const imgExt = path.extname(uploadedFile.name).toLowerCase();
			const uploadPath = `procesar-imagen/${id}${imgExt}`;
			
			// Log request info
			requestCounter++;
			console.log(`Processing request #${requestCounter}: ${uploadPath}`);
			
			// Move uploaded file to destination
			uploadedFile.mv(uploadPath, async (err) => {
				if (err) {
					return res.status(500).json({ 
						status: 'fail', 
						message: 'Error uploading file', 
						data: err.message 
					});
				}
				
				try {
					// Build command parameters
					const parameters = [];
					
					// Add font size parameter
					parameters.push(inputJson.fontSize);
					
					// Add constellation parameter if enabled
					if (inputJson.constellations === 'true') parameters.push("-C");
					
					// Add NGC catalog parameter if enabled
					if (inputJson.ngcCatalog === 'true') parameters.push("-N");
					
					// Add bright stars parameters if enabled
					if (inputJson.brightStars === 'true') {
						parameters.push("-B");
						if (parseInt(inputJson.nBrightest) !== 0) {
							parameters.push(`-b ${inputJson.nBrightest}`);
						}
					}
					
					// Add RA/Dec grid parameters if enabled
					if (inputJson.raDecGrid === 'true') {
						parameters.push(`-G ${inputJson.gridSpacing}`);
						parameters.push(`-g ${hexToRgb(inputJson.gridColor)}`);
					}
					
					// Build and execute command
					const command = `${SCRIPT_PATH} ${uploadPath} ${parameters.join(' ')}`;
					console.log(`Executing command: ${command}`);
					
					const execResult = shell.exec(command, { silent: true });
					
					if (execResult.code !== 0) {
						console.error("Shell execution error:", execResult.stderr);
						throw new Error(`Script execution error: ${execResult.stderr}`);
					}
					
					// Process results
					const stdout = execResult.stdout;
					const imgFile = stdout.split('\n')[0];
					const imgFileNoExt = imgFile.substring(0, imgFile.lastIndexOf("."));
					const imgPath = `${SOLVE_IMAGE_DIR}/${imgFileNoExt}.json`;
					
					// Get object information from JSON
					const objectInfo = getJSONLog(imgPath);
					
					// Return success response
					res.json({ 
						status: 'OK', 
						data: stdout, 
						objectInfo: objectInfo, 
						fileName: imgFile 
					});
				} catch (error) {
					// Clean up uploaded file on error
					try {
						if (fs.existsSync(uploadPath)) {
							fs.unlinkSync(uploadPath);
						}
					} catch (cleanupError) {
						console.error("Error cleaning up file:", cleanupError);
					}
					
					return res.status(500).json({ 
						status: 'fail', 
						message: `Processing error: ${error.message}` 
					});
				}
			});
		} catch (error) {
			return res.status(400).json({ 
				status: 'fail', 
				message: `Request error: ${error.message}` 
			});
		}
	},

	/**
	 * Retrieves the most recently uploaded images
	 * @param {Object} req - Express request object
	 * @param {Object} res - Express response object
	 */
	getLastUploadedImages: async (req, res) => {
		try {
			fs.readdir(THUMBNAIL_DIR, (err, files) => {
				if (err) {
					return res.status(500).json({ 
						status: 'fail', 
						message: `Error reading directory: ${err.message}` 
					});
				}

				// Filter valid image files, sort by timestamp, and take most recent
				const images = files
					.filter(file => /^\d+\.(jpg|jpeg|png|gif)$/i.test(file))
					.map(file => ({
						filename: file,
						timestamp: parseInt(file.split('.')[0], 10)
					}))
					.sort((a, b) => b.timestamp - a.timestamp)
					.slice(0, 14) // Get 14 most recent images
					.map(img => img.filename);
				
				res.json({ status: 'OK', data: images });
			});
		} catch (error) {
			return res.status(500).json({ 
				status: 'fail', 
				message: `Error retrieving images: ${error.message}` 
			});
		}
	},

	/**
	 * Retrieves a specific image by ID
	 * @param {Object} req - Express request object
	 * @param {Object} res - Express response object
	 */
	getImage: async (req, res) => {
		try {
			const imgFilename = req.params.id;
			
			// Validate filename to prevent path traversal
			if (!imgFilename || imgFilename.includes('..') || imgFilename.includes('/')) {
				return res.status(400).json({ 
					status: 'fail', 
					message: 'Invalid image filename' 
				});
			}
			
			const imagePath = `${SOLVE_IMAGE_DIR}/${imgFilename}`;
			
			// Check if file exists before sending
			if (!fs.existsSync(imagePath)) {
				return res.status(404).json({ 
					status: 'fail', 
					message: 'Image not found' 
				});
			}
			
			res.sendFile(imagePath);
		} catch (error) {
			res.status(500).json({ 
				status: 'fail', 
				message: `Error retrieving image: ${error.message}` 
			});
		}
	},
};

module.exports = processController;